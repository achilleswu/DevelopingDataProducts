source("cachematrix.R")
getwd()
cd GitHub
ls()
cd ..
getwd()
m
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
my_matrix<-matrix(1:9, nrow=3, ncol=3)
my_matrix
set(my_matrix)
makeCacheMatrix(x=my_matrix)
m
x
solve(my_matrix)
cacheSolve(my_matrix)
cacheSolve(makeCacheMatrix())
500000/20
500000/60
500000/60/60
500000/60/60/60
q()
swirl()
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
q()
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
?read.csv
mydf<-read.csv(path2csv, stringsAsFactors=FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran<-tbl_df(mydf)
rm("mydf")
cran
?select
select(cran,ip_id,package,country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran,-time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package=="swirl")
filter(cran, r_version=="3.1.1", country=="US")
?Comparison
filter(cran, r_version<="3.0.2", country=="IN")
filter(cran, country=="US" | countr == "IN")
filter(cran, country=="US" | country == "IN")
filter(cran, size>100500 & r_os=="linux-gnu")
filter(cran, size>100500, r_os=="linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2<-select(cran,size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3<-select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb=size/2^20)
mutate(cran3, size_gb=size/2^10)
mutate(cran3, size_mb=size/2^20, size_gb=size/2^10)
mutate(cran3, size_mb=size/2^20, size_gb=size_mb/2^10)
mutate(cran3, correct_size=size+1000)
summarize(cran, ave_bytes=mean(size))
summarize(cran, avg_bytes=mean(size))
library(dplyr)
cran<-tal_df(tbl)
cran<-tbl_df(tbl)
cran<-tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package<-group_by(cran, package)
by_package
summarize(cran, mean(size))
summarize(by_package, mean(size))
submit()
tbl
pack_sum
quantile(pack_sum$count, prob2=0.99)
quantile(pack_sum$count, probs=0.99)
top_counts<-filter(pack_sum, count>679)
top_counts
view(top_counts)
View(top_counts)
top_counts_sorted<-arrange(top_counts, count)
top_counts_sorted<-arrange(top_counts, desc(count))
top_counts_sorted
View(top_counts_sorted)
quantile(pack_sum$unique, probs=0.99)
top_unique<-filter(pack_sum, unique>465)
View(top_unique)
top_unique_sorted<-arrange(top_unique, unique)
top_unique_sorted<-arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res<-gather(students2, key=sex_class, value=count)
res<-gather(students2, sex_class, count, -grade)
res
?seperate
?separate
separate(res, sex_class, c("sex", "class"))
submit()
student3
students3
submit()
?spread
submit()
submit()
submit()
extract_numeric("class5")
submit()
students4
submit()
submit()
?unique
submit()
submit()
passed
failed
mutate(passed, status="passed")
passed<-mutate(passed, status="passed")
failed<-mutate(failed, status="failed")
bind_rows(passed, failed)
sat
submit()
submit()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package=lubridate)
this_day<-today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label=TRUE)
this_moment<-now()
this_moment
hour(this_moment)
my_date<-ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("19-20-12")
ymd("1920-1-2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours=8, minutes=34, seconds=55)
this_moment
this_moment<-update(this_moment, hours=8, minutes=34, seconds=55)
this_moment
?now
now(tzone="America/New_York")
nyc<-now(tzone="America/New_York")
nyc
depart<-nyc+days(2)
depart
depart<-update(depart, hours=17, minutes=34)
depart
arrive<-depart+hours(15)+minutes(50)
?with_tz
arrive<-with_tz(arrive, tzone="Asia/Hong_Kong")
arrive
last_time<-mdy("June 17, 2008", tz="Singapore")
last_time
last_time
?new_interval
how_long<-new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
download.file("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", "
)
)
"
q()
getwd()
pwd
q()
download.file("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", "getdata_data_hid.csv")
d<-read.csv("getdata_data_hid.csv")
d
d$VAL==24
sum(d$VAL==24)
d$VAL
d[!is.na(d$VAL),]$VAL
sum(d[!is.na(d$VAL),]$VAL==24)
dim(d)
d$FES
download.file("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx", "getdata_data_DATA.gov_NGAP.xlsx")
install.packages("xlsx")
library(xlsx)
d<-read.xlsx("getdata_data_DATA.gov_NGAP.xlsx")
d<-read.xlsx("getdata_data_DATA.gov_NGAP.xlsx", "Sheet1")
q()
library(xlsx)
d<-read.xlsx("getdata_data_DATA.gov_NGAP.xlsx", "Sheet1")
d<-read.xlsx("getdata_data_DATA.gov_NGAP.xlsx", 1)
dim(d)
dat<-d[18:23, 7:15]
dat
dat<-d[17:22, 7:15]
dat
dat<-d[18:23, 7:15]
dat<-d[18:22, 7:15]
dat
sum(dat[:,1]*dat[:,6],na.rm=T)
dat<-d[18:22, 7:15]
class(dat)
dat
dat[,1]
as.numeric(dat[,1])
80120*456
download.file("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml", "getdata_data_restaurants.xml")
install.packages("XML")
library(XML)
d<-htmlParse("getdata_data_restaurants.xml")
c<-d
c
l<-getNodeSet(c)
tb<-readHTMLTable(c)
tb
dim(tb)
nrow(tb)
d<-xmlParse("getdata_data_restaurants.xml")
d
dim(d)
head(d)
nrow(d)
tb<-readHTMLTable(d)
xmlToDataFrame(nodes=getNodeSet(d,"response"))
xmlToDataFrame(nodes=getNodeSet(d,"//response"))
data<-xmlToDataFrame(nodes=getNodeSet(d,"//response"))
dim(data)
l<-getNodeSet(d, "//response")
tb<-readHTMLTable(l[[1]])
tb
nrow(tb)
d
xml_data<-xmlToList(d)
xml_data
xml_data[["zip"]]
class(xml_data)
xml_data[1]
dim(xml_data)
dim(as.list(xml_data[[1]]))
dim(as.list(xml_data))
d
n<-c("name","zipcode","neighborhood","councildistrict","policedistrict","location_1 human_address")
n
xmlToDataFrame(nodes=getNodeSet(d,"//row"))[n]
l<-getNodeSet(d, "//response")
tb<-readHTMLTable(l[[1]])
tb
nrow(tb)
l
dim(l)
l[[1]]
xmlToDataFrame(nodes=getNodeSet(d,"//row"))[n]
q()
barplot(dmg, xlab='event type', ylab='prop dmg + crop dmg')
install.packages("shiny")
library(swirl)
swirl()
install_from_swirl(Statistical_Inference)
install_from_swirl("Statistical_Inference")
swirl()
install_from_swirl("Data_Analysis")
install_from_swirl("Regression_Models")
swirl()
choose(5,3)*0.8^3*0.2^2
choose(5,3)*0.8^3*0.2^2+choose(5,4)*0.8^4*0.2+choose(5,5)*0.8^5*0.2^0
pbinom(quantile=2,size=5,prob=0.8,lower.tail=FALSE)
pbinom(size=5,prob=0.8,lower.tail=FALSE)
?pbinom
pbinom(2,size=5,prob=0.8,lower.tail=FALSE)
?qnorm
qnorm(0.1)
qnorm(0.5)
qnorm(0.975,mean=3,sd=2)
1.96*2+3
?pnorm
pnorm(1200, mean=1020,sd=50,lower.tail=FALSE)
pnorm((1200-1020)/50, lower.tail=FALSE)
qnorm(0.75,mean=1020,sd=50)
0.53
.53
ppois(3,mean(2.5*4))
ppois(3,2.5*4))
ppois(3,2.5*4)
pbinom(5,1000,0.01)
ppois(5,1000*0.01)
coinPlot(10)
coinPlot(1000)
coinPlot(10000)
qnorm(0.95)
0.6+qnorm(0.975)*sqrt(0.6*0.4/100)
0.6+c(-1,1)*qnorm(0.975)*sqrt(0.6*0.4/100)
x$conf.int
x$conf.int
x
binom.test(60,100)
binom.test(60,100)$conf.int
mywald(0.2)
ACCompar(20)
lamb<-5/94.32
lamb+c(-1,1)*qnorm(0.975)*sqrt(lamb/1)
lamb+c(-1,1)*qnorm(0.975)*sqrt(lamb/94.32)
poisson.test(5,94.32)
poisson.test(5,94.32)$conf
q()
data(mtcars)
head(mtcars)
table(mtcars)
dim(mtcars)
summary(mtcars$gear)
summary(mtcars$am)
data(mtcars)
head(mtcars)
lm(mpg~am, mtcars)
fit<-lm(mpg~am, mtcars)
summary(fit)
library(ggplot2)
ggplot(mtcars, aes(factor(am), mpg))
ggplot(mtcars, aes(factor(am), mpg)) + geom_boxplot()
library("AppliedPredictiveModeling")
```
pwd
install.packages(c("BH", "curl", "ggplot2", "git2r", "jsonlite", "lubridate", "maps", "packrat", "Rcpp", "RcppArmadillo", "rmarkdown", "roxygen2", "rstudioapi", "spam", "stringi", "testthat", "xtable"))
getwd()
runApp()
library(shiny)
runApp()
library(manipulate)
install.packages("manipulate")
install.packages("rCharts")
library(rCharts)
library(googleVis)
install.packages("googleVis")
library(devtools)
install.packages("Rtools")
insall_githut("Rtools")
insall_github("Rtools")
install_github("Rtools")
require(devtools)
install.packages("Rtools")
require(devtools)
find_rtools()
install_github("rCharts", "ramnathv")
install.packages("Rcpp")
install.packages("Rcpp")
install_github("rCharts", "ramnathv")
install_github("rCharts", "ramnathv")
require(devtools)
install_github("rCharts", "ramnathv")
find_rtools()
library(xCharts)
install.packages("xCharts")
install.packages("leaflet")
install.packages("rickshaw")
install.packages("Rickshaw")
install.packages("googlevis")
install.packages("googleVis")
install.packages("plotly")
install.packages("Slidify")
install_github("ramnathv/slidify")
install.packages("stringi")
install.packages("stringi")
install_github("ramnathv/slidify")
require(devtools)
install.packages("digest")
require(devtools)
install_github("ramnathv/slidify")
install_github("ramnathv/slidifyLibraries")
getwd()
setwd("GitHub/DevelopingDataProducts/")
install.packages("quantmod")
library("quantmod")
library(shiny)
runApp("DevelopingDataProducts")
setwd("..")
runApp("DevelopingDataProducts")
